const { Object: COMObject } = require('winax');
var winax = require('winax');

function connect1C(userName, password, db_path) {
  v7 = new COMObject('V77.Application');
  let initParams = `/d ${db_path}`;
  if (userName) {
    initParams += ` /n "${userName}""`;
  }
  if (password) {
    initParams += ` /p "${password}""`;
  }

  const isConnected = v7.Initialize(v7.RMTrade, initParams, 'NO_SPLASH_SHOW');
  if (!isConnected) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ 1–°.');
    return {
      v7: v7,
      connected: false 
    };
  }
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  return {
    v7: v7,
    connected: true 
  };
}

function disconnect1C(v7) {
  if (v7) {
    try {
      v7.–ó–∞–≤–µ—Ä—à–∏—Ç—å–†–∞–±–æ—Ç—É–°–∏—Å—Ç–µ–º—ã(1);
    } catch {
      console.log("v7 instance not completed in memory for inner clean up")
    }

    try {
      winax.release(v7);
      v7 = undefined;
      global.gc && global.gc();
      console.log('üßπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ 1–° –∑–∞–∫—Ä—ã—Ç–æ.');
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç 1–°:', error);
    }
  }
}

function openReportForm(v7, savePath, formPath) {
  if (!v7) {
    console.error('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ 1–°. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏—Ç–µ connect1C().');
    return;
  }
  if (!savePath) {
    console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–æ—Ö—Ä–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞.');
    return;
  }
  if (!formPath) {
    console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω –≤–Ω–µ—à–Ω–∏–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ 1–°.');
    return;
  }

  try {
    const command = `–û—Ç–∫—Ä—ã—Ç—å–§–æ—Ä–º—É("–û—Ç—á–µ—Ç", "${savePath}", "${formPath}")`;
    console.log(`üì§ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ExecuteBatch`);
    const result = v7.ExecuteBatch(command);
    if (result === true) {
      console.log('‚úÖ –í–Ω–µ—à–Ω—è—è —Ñ–æ—Ä–º–∞ –æ—Ç—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞.');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ExecuteBatch');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ExecuteBatch:', error);
  }
}

module.exports = {
  connect1C,
  disconnect1C,
  openReportForm
};